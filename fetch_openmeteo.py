#!/usr/bin/env python3
import requests
import json
import os
import time
from datetime import datetime
from urllib.parse import urlencode

# Lista √∂ver orter
cities = [
    "eskilstuna",
    "stockholm",
    "g√∂teborg",
    "lomma",
    "malm√∂",
    "ume√•"
]

# Hj√§lpfunktion f√∂r Nominatim-geokodning
def get_coordinates(city_name):
    url = "https://nominatim.openstreetmap.org/search"
    params = {
        "q": city_name + ", Sweden",
        "format": "json",
        "limit": 1
    }
    headers = {"User-Agent": "ai-vader-bot (kontakt@example.com)"}
    r = requests.get(url, params=params, headers=headers)
    r.raise_for_status()
    results = r.json()
    if results:
        return float(results[0]["lat"]), float(results[0]["lon"])
    else:
        return None, None

# Mapping fr√•n Open-Meteo weathercode ‚Üí beskrivning p√• svenska
WEATHERCODE_MAP = {
    0:  "klar himmel",
    1:  "n√§stan klar himmel",
    2:  "halvklart",
    3:  "mulet",
    45: "dimma",
    48: "rimdimma",
    51: "l√§tt duggregn",
    53: "m√•ttligt duggregn",
    55: "t√§ta duggregnskurar",
    56: "l√§tta sn√∂blandade duggregn",
    57: "t√§ta sn√∂blandade regnskurar",
    61: "l√§tt regn",
    63: "m√•ttligt regn",
    65: "kraftigt regn",
    66: "l√§tt sn√∂blandat regn",
    67: "kraftigt sn√∂blandat regn",
    71: "l√§tt sn√∂fall",
    73: "m√•ttligt sn√∂fall",
    75: "kraftigt sn√∂fall",
    77: "sn√∂flingor i drivor",
    80: "l√§tta regnskurar",
    81: "m√•ttliga regnskurar",
    82: "kraftiga regnskurar",
    85: "l√§tta sn√∂skurar",
    86: "kraftiga sn√∂skurar",
    95: "√•ska",
    96: "svag √•ska",
    99: "kraftig √•ska",
}

OUTPUT_FOLDER = "data"
os.makedirs(OUTPUT_FOLDER, exist_ok=True)

for city in cities:
    print(f"\nüå¶Ô∏è H√§mtar Open-Meteo-data f√∂r {city.title()}‚Ä¶")
    lat, lon = get_coordinates(city)
    if lat is None:
        print(f"‚ùå Kunde inte geokoda {city}")
        continue

    params = {
        "latitude": lat,
        "longitude": lon,
        "hourly": "temperature_2m,weathercode",
        "timezone": "Europe/Stockholm"
    }
    url = "https://api.open-meteo.com/v1/forecast?" + urlencode(params)
    try:
        r = requests.get(url)
        r.raise_for_status()
        data = r.json()
    except Exception as e:
        print(f"‚ùå Fel vid h√§mtning f√∂r {city}: {e}")
        continue

    times = data.get("hourly", {}).get("time", [])
    temps = data.get("hourly", {}).get("temperature_2m", [])
    codes = data.get("hourly", {}).get("weathercode", [])

    hourly = []
    for t, temp, code in zip(times, temps, codes):
        # t √§r en ISO-tid med 'T', ex "2025-08-07T15:00"
        dt = datetime.fromisoformat(t)
        time_str = dt.strftime("%Y-%m-%d %H:%M:%S")
        desc = WEATHERCODE_MAP.get(code, "ok√§nt v√§der")
        hourly.append({
            "time": time_str,
            "temp": round(temp, 1),
            "desc": desc
        })

    out_path = os.path.join(OUTPUT_FOLDER, f"openmeteo_{city}.json")
    with open(out_path, "w", encoding="utf-8") as f:
        json.dump(hourly, f, ensure_ascii=False, indent=2)
    print(f"‚úÖ Sparat: {out_path} ({len(hourly)} poster)")
    time.sleep(1)  # skona Nominatim
